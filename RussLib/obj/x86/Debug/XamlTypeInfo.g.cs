//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace RussLib.RussLib_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","14.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace RussLib.RussLib_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::RussLib.RussLib_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::RussLib.RussLib_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[35];
            _typeNameTable[0] = "RussLib.Pages.AboutPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "RussLib.Pages.AboutPageDesktop";
            _typeNameTable[4] = "RussLib.Pages.AboutPageBase";
            _typeNameTable[5] = "BasecodeLibrary.Controls.ControlContainer";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[7] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[8] = "Boolean";
            _typeNameTable[9] = "RussLib.Pages.AboutPageMobile";
            _typeNameTable[10] = "BasecodeLibrary.Controls.RateReminder";
            _typeNameTable[11] = "BasecodeLibrary.Controls.PopupBase";
            _typeNameTable[12] = "Int32";
            _typeNameTable[13] = "String";
            _typeNameTable[14] = "Microsoft.Xaml.Interactions.Media.ControlStoryboardAction";
            _typeNameTable[15] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[16] = "Microsoft.Xaml.Interactions.Media.ControlStoryboardOption";
            _typeNameTable[17] = "System.Enum";
            _typeNameTable[18] = "System.ValueType";
            _typeNameTable[19] = "Object";
            _typeNameTable[20] = "Windows.UI.Xaml.Media.Animation.Storyboard";
            _typeNameTable[21] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[22] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[23] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[24] = "Microsoft.Xaml.Interactions.Core.GoToStateAction";
            _typeNameTable[25] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[26] = "Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior";
            _typeNameTable[27] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[28] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[29] = "System.Windows.Input.ICommand";
            _typeNameTable[30] = "Microsoft.Xaml.Interactions.Core.NavigateToPageAction";
            _typeNameTable[31] = "Microsoft.Xaml.Interactions.Media.PlaySoundAction";
            _typeNameTable[32] = "Double";
            _typeNameTable[33] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[34] = "Microsoft.Xaml.Interactivity.BehaviorCollection";

            _typeTable = new global::System.Type[35];
            _typeTable[0] = typeof(global::RussLib.Pages.AboutPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::RussLib.Pages.AboutPageDesktop);
            _typeTable[4] = typeof(global::RussLib.Pages.AboutPageBase);
            _typeTable[5] = typeof(global::BasecodeLibrary.Controls.ControlContainer);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[8] = typeof(global::System.Boolean);
            _typeTable[9] = typeof(global::RussLib.Pages.AboutPageMobile);
            _typeTable[10] = typeof(global::BasecodeLibrary.Controls.RateReminder);
            _typeTable[11] = typeof(global::BasecodeLibrary.Controls.PopupBase);
            _typeTable[12] = typeof(global::System.Int32);
            _typeTable[13] = typeof(global::System.String);
            _typeTable[14] = typeof(global::Microsoft.Xaml.Interactions.Media.ControlStoryboardAction);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[16] = typeof(global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption);
            _typeTable[17] = typeof(global::System.Enum);
            _typeTable[18] = typeof(global::System.ValueType);
            _typeTable[19] = typeof(global::System.Object);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Media.Animation.Storyboard);
            _typeTable[21] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[22] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[24] = typeof(global::Microsoft.Xaml.Interactions.Core.GoToStateAction);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[26] = typeof(global::Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior);
            _typeTable[27] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[29] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[30] = typeof(global::Microsoft.Xaml.Interactions.Core.NavigateToPageAction);
            _typeTable[31] = typeof(global::Microsoft.Xaml.Interactions.Media.PlaySoundAction);
            _typeTable[32] = typeof(global::System.Double);
            _typeTable[33] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[34] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AboutPage() { return new global::RussLib.Pages.AboutPage(); }
        private object Activate_3_AboutPageDesktop() { return new global::RussLib.Pages.AboutPageDesktop(); }
        private object Activate_4_AboutPageBase() { return new global::RussLib.Pages.AboutPageBase(); }
        private object Activate_5_ControlContainer() { return new global::BasecodeLibrary.Controls.ControlContainer(); }
        private object Activate_9_AboutPageMobile() { return new global::RussLib.Pages.AboutPageMobile(); }
        private object Activate_10_RateReminder() { return new global::BasecodeLibrary.Controls.RateReminder(); }
        private object Activate_11_PopupBase() { return new global::BasecodeLibrary.Controls.PopupBase(); }
        private object Activate_14_ControlStoryboardAction() { return new global::Microsoft.Xaml.Interactions.Media.ControlStoryboardAction(); }
        private object Activate_21_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_22_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_24_GoToStateAction() { return new global::Microsoft.Xaml.Interactions.Core.GoToStateAction(); }
        private object Activate_26_IncrementalUpdateBehavior() { return new global::Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior(); }
        private object Activate_27_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_30_NavigateToPageAction() { return new global::Microsoft.Xaml.Interactions.Core.NavigateToPageAction(); }
        private object Activate_31_PlaySoundAction() { return new global::Microsoft.Xaml.Interactions.Media.PlaySoundAction(); }
        private object Activate_34_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private void VectorAdd_22_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::RussLib.RussLib_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  RussLib.Pages.AboutPage
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_AboutPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  RussLib.Pages.AboutPageDesktop
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("RussLib.Pages.AboutPageBase"));
                userType.Activator = Activate_3_AboutPageDesktop;
                userType.SetContentPropertyName("BasecodeLibrary.Controls.ControlContainer.ControlContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  RussLib.Pages.AboutPageBase
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("BasecodeLibrary.Controls.ControlContainer"));
                userType.Activator = Activate_4_AboutPageBase;
                userType.SetContentPropertyName("BasecodeLibrary.Controls.ControlContainer.ControlContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  BasecodeLibrary.Controls.ControlContainer
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_5_ControlContainer;
                userType.SetContentPropertyName("BasecodeLibrary.Controls.ControlContainer.ControlContent");
                userType.AddMemberName("ControlContent");
                userType.AddMemberName("IsBusy");
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Boolean
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  RussLib.Pages.AboutPageMobile
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("RussLib.Pages.AboutPageBase"));
                userType.Activator = Activate_9_AboutPageMobile;
                userType.SetContentPropertyName("BasecodeLibrary.Controls.ControlContainer.ControlContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  BasecodeLibrary.Controls.RateReminder
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("BasecodeLibrary.Controls.PopupBase"));
                userType.Activator = Activate_10_RateReminder;
                userType.SetContentPropertyName("BasecodeLibrary.Controls.ControlContainer.ControlContent");
                userType.AddMemberName("ReminderTrigger");
                xamlType = userType;
                break;

            case 11:   //  BasecodeLibrary.Controls.PopupBase
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("BasecodeLibrary.Controls.ControlContainer"));
                userType.Activator = Activate_11_PopupBase;
                userType.SetContentPropertyName("BasecodeLibrary.Controls.ControlContainer.ControlContent");
                userType.AddMemberName("PopupTitle");
                userType.AddMemberName("PopupContent");
                xamlType = userType;
                break;

            case 12:   //  Int32
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  String
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Microsoft.Xaml.Interactions.Media.ControlStoryboardAction
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_14_ControlStoryboardAction;
                userType.AddMemberName("ControlStoryboardOption");
                userType.AddMemberName("Storyboard");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Microsoft.Xaml.Interactions.Media.ControlStoryboardOption
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Play", global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption.Play);
                userType.AddEnumValue("Stop", global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption.Stop);
                userType.AddEnumValue("TogglePlayPause", global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption.TogglePlayPause);
                userType.AddEnumValue("Pause", global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption.Pause);
                userType.AddEnumValue("Resume", global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption.Resume);
                userType.AddEnumValue("SkipToFill", global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption.SkipToFill);
                xamlType = userType;
                break;

            case 17:   //  System.Enum
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 18:   //  System.ValueType
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 19:   //  Object
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.UI.Xaml.Media.Animation.Storyboard
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_21_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 22:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_22_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Microsoft.Xaml.Interactions.Core.GoToStateAction
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_24_GoToStateAction;
                userType.AddMemberName("UseTransitions");
                userType.AddMemberName("StateName");
                userType.AddMemberName("TargetObject");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_26_IncrementalUpdateBehavior;
                userType.AddMemberName("Phase");
                userType.AddMemberName("AssociatedObject");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 27:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_27_InvokeCommandAction;
                userType.AddMemberName("InputConverterLanguage");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("Command");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  System.Windows.Input.ICommand
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  Microsoft.Xaml.Interactions.Core.NavigateToPageAction
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_30_NavigateToPageAction;
                userType.AddMemberName("TargetPage");
                userType.AddMemberName("Parameter");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 31:   //  Microsoft.Xaml.Interactions.Media.PlaySoundAction
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_31_PlaySoundAction;
                userType.AddMemberName("Volume");
                userType.AddMemberName("Source");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 32:   //  Double
                xamlType = new global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 34:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::RussLib.RussLib_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_34_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::BasecodeLibrary.BasecodeLibrary_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ControlContainer_ControlContent(object instance)
        {
            var that = (global::BasecodeLibrary.Controls.ControlContainer)instance;
            return that.ControlContent;
        }
        private void set_0_ControlContainer_ControlContent(object instance, object Value)
        {
            var that = (global::BasecodeLibrary.Controls.ControlContainer)instance;
            that.ControlContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_1_ControlContainer_IsBusy(object instance)
        {
            var that = (global::BasecodeLibrary.Controls.ControlContainer)instance;
            return that.IsBusy;
        }
        private void set_1_ControlContainer_IsBusy(object instance, object Value)
        {
            var that = (global::BasecodeLibrary.Controls.ControlContainer)instance;
            that.IsBusy = (global::System.Boolean)Value;
        }
        private object get_2_RateReminder_ReminderTrigger(object instance)
        {
            var that = (global::BasecodeLibrary.Controls.RateReminder)instance;
            return that.ReminderTrigger;
        }
        private void set_2_RateReminder_ReminderTrigger(object instance, object Value)
        {
            var that = (global::BasecodeLibrary.Controls.RateReminder)instance;
            that.ReminderTrigger = (global::System.Int32)Value;
        }
        private object get_3_PopupBase_PopupTitle(object instance)
        {
            var that = (global::BasecodeLibrary.Controls.PopupBase)instance;
            return that.PopupTitle;
        }
        private void set_3_PopupBase_PopupTitle(object instance, object Value)
        {
            var that = (global::BasecodeLibrary.Controls.PopupBase)instance;
            that.PopupTitle = (global::System.String)Value;
        }
        private object get_4_PopupBase_PopupContent(object instance)
        {
            var that = (global::BasecodeLibrary.Controls.PopupBase)instance;
            return that.PopupContent;
        }
        private void set_4_PopupBase_PopupContent(object instance, object Value)
        {
            var that = (global::BasecodeLibrary.Controls.PopupBase)instance;
            that.PopupContent = (global::System.String)Value;
        }
        private object get_5_ControlStoryboardAction_ControlStoryboardOption(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.ControlStoryboardAction)instance;
            return that.ControlStoryboardOption;
        }
        private void set_5_ControlStoryboardAction_ControlStoryboardOption(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.ControlStoryboardAction)instance;
            that.ControlStoryboardOption = (global::Microsoft.Xaml.Interactions.Media.ControlStoryboardOption)Value;
        }
        private object get_6_ControlStoryboardAction_Storyboard(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.ControlStoryboardAction)instance;
            return that.Storyboard;
        }
        private void set_6_ControlStoryboardAction_Storyboard(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.ControlStoryboardAction)instance;
            that.Storyboard = (global::Windows.UI.Xaml.Media.Animation.Storyboard)Value;
        }
        private object get_7_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_8_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_8_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_9_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_9_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_10_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_11_GoToStateAction_UseTransitions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.GoToStateAction)instance;
            return that.UseTransitions;
        }
        private void set_11_GoToStateAction_UseTransitions(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.GoToStateAction)instance;
            that.UseTransitions = (global::System.Boolean)Value;
        }
        private object get_12_GoToStateAction_StateName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.GoToStateAction)instance;
            return that.StateName;
        }
        private void set_12_GoToStateAction_StateName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.GoToStateAction)instance;
            that.StateName = (global::System.String)Value;
        }
        private object get_13_GoToStateAction_TargetObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.GoToStateAction)instance;
            return that.TargetObject;
        }
        private void set_13_GoToStateAction_TargetObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.GoToStateAction)instance;
            that.TargetObject = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_14_IncrementalUpdateBehavior_Phase(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior)instance;
            return that.Phase;
        }
        private void set_14_IncrementalUpdateBehavior_Phase(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior)instance;
            that.Phase = (global::System.Int32)Value;
        }
        private object get_15_IncrementalUpdateBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_16_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_16_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_17_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_17_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_18_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_18_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_19_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_19_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_20_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_20_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_21_NavigateToPageAction_TargetPage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.NavigateToPageAction)instance;
            return that.TargetPage;
        }
        private void set_21_NavigateToPageAction_TargetPage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.NavigateToPageAction)instance;
            that.TargetPage = (global::System.String)Value;
        }
        private object get_22_NavigateToPageAction_Parameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.NavigateToPageAction)instance;
            return that.Parameter;
        }
        private void set_22_NavigateToPageAction_Parameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.NavigateToPageAction)instance;
            that.Parameter = (global::System.Object)Value;
        }
        private object get_23_PlaySoundAction_Volume(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.PlaySoundAction)instance;
            return that.Volume;
        }
        private void set_23_PlaySoundAction_Volume(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.PlaySoundAction)instance;
            that.Volume = (global::System.Double)Value;
        }
        private object get_24_PlaySoundAction_Source(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.PlaySoundAction)instance;
            return that.Source;
        }
        private void set_24_PlaySoundAction_Source(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Media.PlaySoundAction)instance;
            that.Source = (global::System.String)Value;
        }
        private object get_25_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_25_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::RussLib.RussLib_XamlTypeInfo.XamlMember xamlMember = null;
            global::RussLib.RussLib_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "BasecodeLibrary.Controls.ControlContainer.ControlContent":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BasecodeLibrary.Controls.ControlContainer");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "ControlContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_ControlContainer_ControlContent;
                xamlMember.Setter = set_0_ControlContainer_ControlContent;
                break;
            case "BasecodeLibrary.Controls.ControlContainer.IsBusy":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BasecodeLibrary.Controls.ControlContainer");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ControlContainer_IsBusy;
                xamlMember.Setter = set_1_ControlContainer_IsBusy;
                break;
            case "BasecodeLibrary.Controls.RateReminder.ReminderTrigger":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BasecodeLibrary.Controls.RateReminder");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "ReminderTrigger", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_RateReminder_ReminderTrigger;
                xamlMember.Setter = set_2_RateReminder_ReminderTrigger;
                break;
            case "BasecodeLibrary.Controls.PopupBase.PopupTitle":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BasecodeLibrary.Controls.PopupBase");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "PopupTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_PopupBase_PopupTitle;
                xamlMember.Setter = set_3_PopupBase_PopupTitle;
                break;
            case "BasecodeLibrary.Controls.PopupBase.PopupContent":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BasecodeLibrary.Controls.PopupBase");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "PopupContent", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_PopupBase_PopupContent;
                xamlMember.Setter = set_4_PopupBase_PopupContent;
                break;
            case "Microsoft.Xaml.Interactions.Media.ControlStoryboardAction.ControlStoryboardOption":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Media.ControlStoryboardAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "ControlStoryboardOption", "Microsoft.Xaml.Interactions.Media.ControlStoryboardOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ControlStoryboardAction_ControlStoryboardOption;
                xamlMember.Setter = set_5_ControlStoryboardAction_ControlStoryboardOption;
                break;
            case "Microsoft.Xaml.Interactions.Media.ControlStoryboardAction.Storyboard":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Media.ControlStoryboardAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Storyboard", "Windows.UI.Xaml.Media.Animation.Storyboard");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ControlStoryboardAction_Storyboard;
                xamlMember.Setter = set_6_ControlStoryboardAction_Storyboard;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_8_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_9_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_10_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.GoToStateAction.UseTransitions":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.GoToStateAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "UseTransitions", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_GoToStateAction_UseTransitions;
                xamlMember.Setter = set_11_GoToStateAction_UseTransitions;
                break;
            case "Microsoft.Xaml.Interactions.Core.GoToStateAction.StateName":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.GoToStateAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "StateName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_GoToStateAction_StateName;
                xamlMember.Setter = set_12_GoToStateAction_StateName;
                break;
            case "Microsoft.Xaml.Interactions.Core.GoToStateAction.TargetObject":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.GoToStateAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "TargetObject", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_GoToStateAction_TargetObject;
                xamlMember.Setter = set_13_GoToStateAction_TargetObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior.Phase":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Phase", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_IncrementalUpdateBehavior_Phase;
                xamlMember.Setter = set_14_IncrementalUpdateBehavior_Phase;
                break;
            case "Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior.AssociatedObject":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_15_IncrementalUpdateBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_16_InvokeCommandAction_InputConverterLanguage;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_17_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_18_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_19_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_InvokeCommandAction_Command;
                xamlMember.Setter = set_20_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.NavigateToPageAction.TargetPage":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.NavigateToPageAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "TargetPage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_NavigateToPageAction_TargetPage;
                xamlMember.Setter = set_21_NavigateToPageAction_TargetPage;
                break;
            case "Microsoft.Xaml.Interactions.Core.NavigateToPageAction.Parameter":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.NavigateToPageAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Parameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_NavigateToPageAction_Parameter;
                xamlMember.Setter = set_22_NavigateToPageAction_Parameter;
                break;
            case "Microsoft.Xaml.Interactions.Media.PlaySoundAction.Volume":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Media.PlaySoundAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Volume", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_PlaySoundAction_Volume;
                xamlMember.Setter = set_23_PlaySoundAction_Volume;
                break;
            case "Microsoft.Xaml.Interactions.Media.PlaySoundAction.Source":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Media.PlaySoundAction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Source", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_PlaySoundAction_Source;
                xamlMember.Setter = set_24_PlaySoundAction_Source;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::RussLib.RussLib_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::RussLib.RussLib_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_25_Interaction_Behaviors;
                xamlMember.Setter = set_25_Interaction_Behaviors;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::RussLib.RussLib_XamlTypeInfo.XamlSystemBaseType
    {
        global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::RussLib.RussLib_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

